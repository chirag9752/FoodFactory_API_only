continue
JWT.decode(token, SECRET_KEY)[0]
token
continue
JwtTokenService.decode
JwtTokenService.decode(token)
continue
token
JwtTokenService.decode(token)
token = request.headers['Authorization']&.split(' ')&.last
token
request.headers['Authorization']&.split(' ')&.last
continue
request.headers['Authorization']
request.headers
headers
request.headers['Authorization']&.split(' ')&.last
exit
token
continue
json['user']
continue
exit
json
expect(response).to have_http_status(:ok)
expect(response)
cc response
response
c
@user.email
@user
c
@user
c
contine
@user
continue
@hotel
continue
Hotel.find(params[:hotel_id])
params[:hotel_id]
params[:id]
@hotel
params
continue
params
continue
params
exit
continue
params[:user][:email]
params[:email]
params
continue
params
continue
\
continue
params
continue
params
params[:order_items]
continue
params
params[:order_items]
continue
params[:hotel_id]
params[:id]
params
continue
@hotel
params
continue
params
continue
params[:user_id][:id]
params[:id][:user_id]
params[:id]
params
continue
params[:id]
continue
params
continue
params
